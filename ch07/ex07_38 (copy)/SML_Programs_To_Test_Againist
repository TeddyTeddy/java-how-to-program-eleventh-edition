(Tested) SML Program 1 - Adding 2 numbers (overflow can happen)
00 ? +1009 // READ a word into 09
01 ? +2009 // LOAD 09 into accumulator
02 ? +100A // READ a word into 0A
03 ? +300A // ADD memory[0A] to accumulator and leave the result in accumulator
04 ? +210B // STORE a word from the accumulator into 0B
05 ? +110B // WRITE 0B into screen
06 ? +4300 // HALT

SML Program 2 - Subtracting 2 numbers (overflow can happen)
00 ? +1009 // READ a word into 09
01 ? +2009 // LOAD 09 into accumulator
02 ? +1010 // READ a word into 10
03 ? +3110 // SUBTRACT memory[10] from accumulator and leave the result in accumulator
04 ? +2111 // STORE a word from the accumulator into 11
05 ? +1111 // WRITE 11 into screen
06 ? +4300 // HALT

SML Program 3 - Dividing 2 numbers (divide by zero can happen)
00 ? +1009 // READ a word into 09
01 ? +2009 // LOAD 09 into accumulator
02 ? +1010 // READ a word into 10
03 ? +3210 // DIVIDE accumulator by memory[10] and leave the result in accumulator
04 ? +2111 // STORE a word from the accumulator into 11
05 ? +1111 // WRITE 11 into screen
06 ? +4300 // HALT

SML Program 4 - Multiplying 2 numbers (overflow can happen)
00 ? +1009 // READ a word into 09
01 ? +2009 // LOAD 09 into accumulator
02 ? +1010 // READ a word into 10
03 ? +3310 // MULTIPLY accumulator by memory[10] and leave the result in accumulator
04 ? +2111 // STORE a word from the accumulator into 11
05 ? +1111 // WRITE 11 into screen
06 ? +4300 // HALT

SML Program 5 - Sentinel Controlled Program to sum 10 integers
Source: https://www.chegg.com/homework-help/machine-language-programming-let-s-create-computer-called-si-chapter-8-problem-31e-solution-9780133379334-exc

The sentinel controlled program can be made by putting the instruction
for taking two positive numbers as input and storing their sum in memory.
This can be done by taking a number as input and storing that in the accumulator.
This would be continued with the help of the branch instruction until a negative
number is encountered.

00 ? +1011 READ input A into memory location 11
01 ? +2011 LOAD A into accumulator
02 ? +4110 BRANCHNEG TO 10 : If A contains negative number, halt the execution
03 ? +1012 READ input B into memory location 12
04 ? +2012 LOAD B into accumulator
05 ? +4109 BRANCHNEG to 09 : If B contains a negative number, write A to the output and halt the execution
06 ? +3011 ADD input A to the accumulator
07 ? +2111 STORE A : Write the word in accumulator into A
08 ? +4003 BRANCH TO B
09 ? +1111 WRITE A : Write the word stored in A to screen
10 ? +4300 HALT
11 ? VARIABLE A  // Location for the SUM
12 ? VARIABLE B

Ex07_36_a : SML Program 6 - Sentinel (0) Controlled Program to sum any number of integers
SOURCE: https://coderanch.com/t/676573/engineering/Building-computer-compiler

I modified the program that is provided in SOURCE to make the sentinel 0

Location	Instruction	Comments
00		1008		READ an integer A
01		2008		LOAD A to accumulator
02		4206		BRANCHZERO: Sentinel is zero, so branch to end the loop if it's entered
03		3009		ADD the sum to the accumulator
04		2109		STORE : Store the sum
05		4000		BRANCH : Repeat process
06		1109		WRITE : Write the sum
07		4300		HALT End the program
08		0000		Location for input A
09		0000		Location for sum

TEST THIS - Ex07_36_b : SML Program 7 
SOURCE: https://coderanch.com/t/676573/engineering/Building-computer-compiler
Use a counter-controlled loop to read seven numbers, some positive and some negative, and compute and display their average.

Location	Instruction	Comments
00		2016		Load initial counter to accumulator
01		2118		Store current counter value
02		1019		Read an integer
03		2019		Load integer to accumulator
04		3020		Add the number to the sum
05		2120		Store the sum
06		2018		Load current counter to accumulator
07		3117		Decrement counter
08		4211		If counter == 0 end loop
09		2118		Store current counter value
10		4002		Repeat the process
11		2020		Load the sum to accumulator
12		3216		Divide the sum by the count of numbers entered
13		2121		Store the average of the numbers
14		1121		Write the average
15		4300		End program
16		0007		Initial value for counter
17		0001		Counter decrement
18		0000		Location for current counter
19		0000		Location for input integer
20		0000		Location for sum
21		0000		Location for average

TEST THIS - Ex07_36_c - SML PRogram 8
SOURCE: https://coderanch.com/t/676573/engineering/Building-computer-compiler
Read a series of numbers, and determine and display the largest number. 
The first number read indicates how many numbers should be processed.

Here it is:
Location	Instruction	Comments
00		1016		Input the total number of integers (counter)
01		1017		Input an integer
02		2018		Load maximum to accumulator
03		3117		Subtract the entered number
04		4110		If result < 0 goto 10
05		2016		Load counter to accumulator
06		3115		Decrement counter
07		4213		If counter == 0 end loop and goto 13
08		2116		Store the counter
09		4001		Repeat input process
10		2017		Load input integer to accumulator
11		2118		Store it as new maximum
12		4005		Goto 05 to decrement counter
13		1118		Write the maximum
14		4300		End Program
15		0001		Counter decrement value
16		0000		Location for counter
17		0000		Location for input integer
18		0000		Location for maximum



